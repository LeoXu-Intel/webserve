{"ast":null,"code":"import { ref, defineComponent } from 'vue';\nimport axios, { formToJSON } from 'axios';\n// import clipboard from 'clipboard.js-master'\nimport { ElNotification } from 'element-plus';\n// import { th } from 'element-plus/es/locale';\n\nexport default defineComponent({\n  name: 'ReportReferenceMain',\n  data() {\n    return {\n      category: ref(''),\n      deviceType: ref(''),\n      failureType: ref(''),\n      riskLevel: ref(''),\n      code: ref(''),\n      finding: ref(''),\n      assessment: ref(''),\n      criteria: ref(''),\n      deviceTypeList: [],\n      categoryList: [],\n      failureTypeList: [],\n      riskLevelList: []\n    };\n  },\n  methods: {\n    addNewContent() {\n      axios.get(\"/api/ASIC/Report/addNewContent\", {\n        params: {\n          category: this.category,\n          deviceType: this.deviceType,\n          failureType: this.failureType,\n          riskLevel: this.riskLevel,\n          code: this.code,\n          finding: this.finding,\n          criteria: this.criteria,\n          assessment: this.assessment\n        }\n      }).then(response => {\n        const responseData = response.data;\n        if (responseData.code === 0) {\n          // 插入成功\n          this.$message.success('添加成功');\n\n          // 清空数据属性\n          this.category = '';\n          this.deviceType = '';\n          this.failureType = '';\n          this.riskLevel = '';\n          this.code = '';\n          this.finding = '';\n          this.criteria = '';\n          this.assessment = '';\n        } else {\n          // 插入失败，根据实际情况处理错误\n          this.$message.error(`添加失败：${responseData.msg}`);\n        }\n      });\n    },\n    searchDeviceType() {\n      axios.get(\"/api/ASIC/Report/getDeviceType\", {\n        params: {\n          category: this.category\n        }\n      }).then(response => {\n        this.deviceTypeList = response.data.data;\n        this.failureType = \"\";\n        this.riskLevel = \"\";\n        this.code = \"\";\n        this.finding = \"\";\n        this.assessment = \"\";\n        this.criteria = \"\";\n        this.criteriaHTML = \"\";\n        this.failureTypeList = \"\";\n      });\n    },\n    searchFailureType() {\n      axios.get(\"/api/ASIC/Report/getFailureType\", {\n        params: {\n          category: this.category,\n          deviceType: this.deviceType\n        }\n      }).then(response => {\n        this.finding = \"\";\n        this.assessment = \"\";\n        this.criteria = \"\";\n        this.criteriaHTML = \"\";\n        this.failureTypeList = response.data.data;\n      });\n    },\n    searchRiskLevelAndCode() {\n      axios.get(\"/api/ASIC/Report/getRiskLevel\", {\n        params: {\n          failureType: this.failureType\n        }\n      }).then(response => {\n        this.riskLevel = \"\";\n        this.riskLevelList = response.data.data;\n      });\n      axios.get(\"/api/ASIC/Report/getCode\", {\n        params: {\n          failureType: this.failureType\n        }\n      }).then(response => {\n        this.code = response.data.data;\n        this.finding = \"\";\n        this.assessment = \"\";\n        this.criteria = \"\";\n        this.criteriaHTML = \"\";\n      });\n    },\n    searchReference() {\n      axios.get(\"/api/ASIC/Report/getReference\", {\n        params: {\n          failureType: this.failureType,\n          riskLevel: this.riskLevel\n        }\n      }).then(response => {\n        // console.log(response.data.data.assessment)\n        const reference = response.data.data;\n        this.finding = reference.finding;\n        this.assessment = reference.assessment;\n        this.riskLevel == reference.riskLevel.replace(/[\\r\\n]/g, '');\n        if (this.riskLevel == 'E1/2') {\n          //this.$message.success('E1/2');\n          this.criteriaHTML = `<span style=\"color: red; font-weight: bold;\">Mandatory Complaint:</span>`;\n          this.criteria = reference.criteria;\n        } else if (this.riskLevel == 'E2/3') {\n          this.criteriaHTML = `<span style=\"color: red; font-weight: bold;\">Case by Case Assessment:</span>`;\n          this.criteria = reference.criteria;\n        } else if (this.riskLevel == 'E4') {\n          this.criteriaHTML = `<span style=\"color: red; font-weight: bold;\">Good Criteria:</span>`;\n          this.criteria = reference.criteria;\n        } else {\n          this.criteria = reference.criteria;\n        }\n      });\n    },\n    deleteReference() {\n      // 使用原生confirm函数创建确认对话框\n      const isConfirmed = window.confirm('确定要删除吗？');\n      if (isConfirmed) {\n        // 用户点击了确认按钮，执行删除操作\n        axios.get(\"/api/ASIC/Report/deleteContent\", {\n          params: {\n            category: this.category,\n            deviceType: this.deviceType,\n            failureType: this.failureType,\n            riskLevel: this.riskLevel\n          }\n        }).then(response => {\n          const responseData = response.data;\n          if (responseData.data == '1' || responseData.data == '2') {\n            // 删除成功\n            this.$message.success('删除成功');\n            // 清空数据属性\n            this.category = '';\n            this.deviceType = '';\n            this.failureType = '';\n            this.riskLevel = '';\n            this.code = '';\n            this.finding = '';\n            this.criteria = '';\n            this.assessment = '';\n            window.location.reload();\n          } else {\n            // 删除失败，根据实际情况处理错误\n            this.$message.error(`删除失败：数据库中不存在该值`);\n          }\n        });\n      } else {\n        // 用户点击了取消按钮，不执行删除操作\n        this.$message.info('取消删除');\n      }\n    }\n  },\n  created: function () {\n    //axios.get(\"/api/ASIC/Report/getCategory\")\n    //.then((response)=>{\n    //this.categoryList = response.data.data\n    //})\n  }\n});\n\n// 解决ERROR ResizeObserver loop completed with undelivered notifications.\n\n//问题的\n\nconst debounce = (fn, delay) => {\n  let timer = null;\n  return function () {\n    let context = this;\n    let args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n\n// 解决ERROR ResizeObserver loop completed with undelivered notifications.\n\nconst _ResizeObserver = window.ResizeObserver;\nwindow.ResizeObserver = class ResizeObserver extends _ResizeObserver {\n  constructor(callback) {\n    callback = debounce(callback, 16);\n    super(callback);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}