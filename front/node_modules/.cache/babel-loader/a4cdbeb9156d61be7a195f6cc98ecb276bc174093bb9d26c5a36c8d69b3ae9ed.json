{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport Login from '../components/Login.vue'; // 导入登录组件\n\nimport Container from \"../components/Container.vue\";\nimport LoadingView from \"../components/Loading.vue\";\nimport History from \"../components/History/History.vue\";\nimport Aotu_Config from \"../components/LabTools/Sensor/Aotu_Config.vue\";\nimport Test_Case_Overview from \"../components/LabTools/Sensor/Test_Case_Overview.vue\";\nimport Env_Config from \"../components/LabTools/Sensor/Env_Config.vue\";\n\n// 定义路由数组\nconst routes = [{\n  path: '/',\n  redirect: '/login'\n},\n// 将根路径重定向到登录\n{\n  path: '/login',\n  component: Login\n},\n// 添加登录路由\n\n// LabTools\n{\n  path: \"/LabTools\",\n  component: Container,\n  children: [\n  // Sensor 相关路由\n  {\n    path: \"Sensor/Env_Config\",\n    component: Env_Config // 注意这里不是 components\n  }, {\n    path: \"Sensor/Test_Case_Overview\",\n    component: Test_Case_Overview // 注意这里不是 components\n  }, {\n    path: \"Sensor/Aotu_Config\",\n    component: Aotu_Config // 注意这里不是 components\n  }]\n  //meta: { requiresAuth: true }, // 添加元数据标记需要认证\n},\n// 历史记录路由\n{\n  path: \"/History\",\n  component: History,\n  meta: {\n    requiresAuth: true\n  } // 假设历史记录页也需要认证\n},\n// Loading 视图路由（如果需要的话）\n{\n  path: \"/loading\",\n  component: LoadingView\n}\n// 其他路由...\n];\n\n// 创建路由器实例\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// 全局前置守卫\nrouter.beforeEach((to, from, next) => {\n  // 检查路由是否需要认证\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // 如果用户未登录，则重定向到登录页面\n    if (!isLoggedIn()) {\n      next('/login');\n    } else {\n      next(); // 如果已登录，继续导航\n    }\n  } else {\n    next(); // 对于不需要认证的路由，直接放行\n  }\n});\n\n// 检查用户是否已登录的函数\nfunction isLoggedIn() {\n  // 这里的逻辑可能需要根据实际的登录逻辑进行调整\n  return localStorage.getItem('isUserLoggedIn') === 'true';\n}\n\n// 导出路由器实例\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Login","Container","LoadingView","History","Aotu_Config","Test_Case_Overview","Env_Config","routes","path","redirect","component","children","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","isLoggedIn","localStorage","getItem"],"sources":["C:/Users/axu/OneDrive - Intel Corporation/Desktop/Web serve/webserve-0320/webserve/front/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport Login from '../components/Login.vue'; // 导入登录组件\r\n\r\nimport Container from \"../components/Container.vue\";\r\nimport LoadingView from \"../components/Loading.vue\";\r\nimport History from \"../components/History/History.vue\";\r\n\r\nimport Aotu_Config from \"../components/LabTools/Sensor/Aotu_Config.vue\";\r\nimport Test_Case_Overview from \"../components/LabTools/Sensor/Test_Case_Overview.vue\";\r\nimport Env_Config from \"../components/LabTools/Sensor/Env_Config.vue\";\r\n\r\n// 定义路由数组\r\nconst routes = [\r\n  { path: '/', redirect: '/login' }, // 将根路径重定向到登录\r\n  { path: '/login', component: Login }, // 添加登录路由\r\n\r\n  // LabTools\r\n  {\r\n    path: \"/LabTools\",\r\n    component: Container,\r\n    children: [\r\n      // Sensor 相关路由\r\n      {\r\n        path: \"Sensor/Env_Config\",\r\n        component: Env_Config, // 注意这里不是 components\r\n      },\r\n      {\r\n        path: \"Sensor/Test_Case_Overview\",\r\n        component: Test_Case_Overview, // 注意这里不是 components\r\n      },\r\n      {\r\n        path: \"Sensor/Aotu_Config\",\r\n        component: Aotu_Config, // 注意这里不是 components\r\n      },\r\n    ],\r\n    //meta: { requiresAuth: true }, // 添加元数据标记需要认证\r\n  },\r\n  // 历史记录路由\r\n  {\r\n    path: \"/History\",\r\n    component: History,\r\n    meta: { requiresAuth: true }, // 假设历史记录页也需要认证\r\n  },\r\n  // Loading 视图路由（如果需要的话）\r\n  {\r\n    path: \"/loading\",\r\n    component: LoadingView,\r\n  },\r\n  // 其他路由...\r\n];\r\n\r\n// 创建路由器实例\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes,\r\n});\r\n\r\n// 全局前置守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  // 检查路由是否需要认证\r\n  if (to.matched.some(record => record.meta.requiresAuth)) {\r\n    // 如果用户未登录，则重定向到登录页面\r\n    if (!isLoggedIn()) {\r\n      next('/login');\r\n    } else {\r\n      next(); // 如果已登录，继续导航\r\n    }\r\n  } else {\r\n    next(); // 对于不需要认证的路由，直接放行\r\n  }\r\n});\r\n\r\n// 检查用户是否已登录的函数\r\nfunction isLoggedIn() {\r\n  // 这里的逻辑可能需要根据实际的登录逻辑进行调整\r\n  return localStorage.getItem('isUserLoggedIn') === 'true';\r\n}\r\n\r\n// 导出路由器实例\r\nexport default router;\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,KAAK,MAAM,yBAAyB,CAAC,CAAC;;AAE7C,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,OAAO,MAAM,mCAAmC;AAEvD,OAAOC,WAAW,MAAM,+CAA+C;AACvE,OAAOC,kBAAkB,MAAM,sDAAsD;AACrF,OAAOC,UAAU,MAAM,8CAA8C;;AAErE;AACA,MAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,GAAG;EAAEC,QAAQ,EAAE;AAAS,CAAC;AAAE;AACnC;EAAED,IAAI,EAAE,QAAQ;EAAEE,SAAS,EAAEV;AAAM,CAAC;AAAE;;AAEtC;AACA;EACEQ,IAAI,EAAE,WAAW;EACjBE,SAAS,EAAET,SAAS;EACpBU,QAAQ,EAAE;EACR;EACA;IACEH,IAAI,EAAE,mBAAmB;IACzBE,SAAS,EAAEJ,UAAU,CAAE;EACzB,CAAC,EACD;IACEE,IAAI,EAAE,2BAA2B;IACjCE,SAAS,EAAEL,kBAAkB,CAAE;EACjC,CAAC,EACD;IACEG,IAAI,EAAE,oBAAoB;IAC1BE,SAAS,EAAEN,WAAW,CAAE;EAC1B,CAAC;EAEH;AACF,CAAC;AACD;AACA;EACEI,IAAI,EAAE,UAAU;EAChBE,SAAS,EAAEP,OAAO;EAClBS,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC;AACD;AACA;EACEL,IAAI,EAAE,UAAU;EAChBE,SAAS,EAAER;AACb;AACA;AAAA,CACD;;AAED;AACA,MAAMY,MAAM,GAAGhB,YAAY,CAAC;EAC1BiB,OAAO,EAAEhB,gBAAgB,CAACiB,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CX;AACF,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACb,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD;IACA,IAAI,CAACa,UAAU,CAAC,CAAC,EAAE;MACjBJ,IAAI,CAAC,QAAQ,CAAC;IAChB,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC,CAAC,CAAC;IACV;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEF;AACA,SAASI,UAAUA,CAAA,EAAG;EACpB;EACA,OAAOC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,KAAK,MAAM;AAC1D;;AAEA;AACA,eAAed,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}