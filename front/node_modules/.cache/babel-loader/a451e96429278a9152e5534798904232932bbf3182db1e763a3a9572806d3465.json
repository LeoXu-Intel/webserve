{"ast":null,"code":"import { useRoute } from 'vue-router';\nimport { ref, reactive, onMounted, watch } from 'vue';\nimport configData from '@/assets/config.json';\nimport { computed } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  setup() {\n    const store = useStore();\n    // 使用 computed 来创建只读的计算属性，它们将从 Vuex store 中获取状态\n    const selection1 = computed(() => store.state.selections.selection1);\n    const selection2 = computed(() => store.state.selections.selection2);\n    const selection3 = computed(() => store.state.selections.selection3);\n    const selection4 = computed(() => store.state.selections.selection4);\n    const activeName = ref('first');\n    const combinedTabsConfig = ref(configData); // 这里应该是你的标签页配置数组\n    const forms = reactive({});\n\n    // 初始化forms对象，为每个tab和formItem创建响应式属性\n    const initializeForms = config => {\n      const formsData = {};\n      config.forEach(tab => {\n        formsData[tab.label] = {};\n        tab.formItems.forEach(item => {\n          formsData[tab.label][item.model] = '';\n        });\n      });\n      return formsData;\n    };\n\n    // 使用初始化函数设置forms的初始值\n    Object.keys(initializeForms(configData)).forEach(key => {\n      forms[key] = initializeForms(configData)[key];\n    });\n\n    // 更新表单的方法\n    const updateForms = () => {\n      // 根据value1中的选择更新forms对象\n      value1.value.forEach(selectedTabLabel => {\n        const tabConfig = configData.find(tab => tab.label === selectedTabLabel);\n        if (tabConfig) {\n          tabConfig.formItems.forEach(item => {\n            if (forms[selectedTabLabel]) {\n              forms[selectedTabLabel][item.model] = item.label || '';\n            }\n          });\n        }\n      });\n    };\n    watch(value1, updateForms, {\n      immediate: true\n    });\n\n    // 在组件挂载后获取路由查询参数并赋值\n    onMounted(() => {\n      selection1.value = route.query.selection1 || '';\n      selection2.value = route.query.selection2 || '';\n      selection3.value = route.query.selection3 || '';\n      try {\n        value1.value = JSON.parse(route.query.selection4 || '[]');\n      } catch (e) {\n        value1.value = [];\n      }\n    });\n\n    // 定义build方法\n    const build = () => {\n      // 这里应该是你的构建逻辑\n      console.log('Build function called');\n    };\n\n    // 返回响应式引用和函数...\n    return {\n      selection1,\n      selection2,\n      selection3,\n      value1,\n      // 返回value1\n      activeName,\n      combinedTabsConfig,\n      forms,\n      // 返回forms对象\n      build // 返回build函数\n    };\n  }\n};","map":{"version":3,"names":["useRoute","ref","reactive","onMounted","watch","configData","computed","useStore","setup","store","selection1","state","selections","selection2","selection3","selection4","activeName","combinedTabsConfig","forms","initializeForms","config","formsData","forEach","tab","label","formItems","item","model","Object","keys","key","updateForms","value1","value","selectedTabLabel","tabConfig","find","immediate","route","query","JSON","parse","e","build","console","log"],"sources":["C:\\Users\\axu\\OneDrive - Intel Corporation\\Desktop\\Web serve\\webserve-0320\\webserve\\front\\src\\components\\LabTools\\Sensor\\Env_Config.vue"],"sourcesContent":["<template>\r\n<div style=\"display: flex; width: 100%; justify-content: center;\">\r\n  <el-steps :active=\"1\" finish-status=\"success\" simple style=\"width: 70%; margin-top: 5px;\">\r\n    <el-step title=\"Test Case Overview\"></el-step>\r\n    <el-step title=\"Environment Configuration\"></el-step>\r\n    <el-step title=\"Aotumation Configuration\"></el-step>\r\n  </el-steps>\r\n</div>\r\n\r\n  <div class=\"search-form\">\r\n    <div class=\"row\">\r\n\r\n      <div class=\"input-group\">\r\n        <label for=\"input1\">Platform:</label>\r\n        <input id=\"input1\" v-model=\"selection1\" readonly>\r\n      </div>\r\n\r\n      <div class=\"input-group\">\r\n        <label for=\"input2\">Test_Cycle_Name:</label>\r\n        <input id=\"input2\" v-model=\"selection2\" readonly>\r\n      </div>\r\n\r\n      <div class=\"input-group\">\r\n        <label for=\"input3\">Cycle_Config:</label>\r\n        <input id=\"input3\" v-model=\"selection3\" readonly>\r\n      </div>\r\n\r\n\r\n      <div class=\"input-group\">\r\n        <label for=\"select4\">Test_Domain:</label>\r\n          <el-select v-model=\"value1\" multiple placeholder=\"请选择\">\r\n            <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n            </el-option>\r\n          </el-select>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n    \r\n\r\n\r\n   <div class=\"tabs-container\">\r\n    <el-tabs v-model=\"activeName\" type=\"card\">\r\n  <el-tab-pane\r\n    v-for=\"tab in combinedTabsConfig\"\r\n    :key=\"tab.label\"\r\n    :label=\"tab.label\"\r\n    :name=\"tab.label\"\r\n  >\r\n    <el-form label-position=\"top\">\r\n      <el-form-item\r\n        v-for=\"item in tab.formItems\"\r\n        :key=\"item.model\"\r\n        :label=\"item.label\"\r\n      >\r\n        <el-input\r\n          :type=\"item.type\"\r\n          v-model=\"forms[tab.label][item.model]\"\r\n        />\r\n      </el-form-item>\r\n    </el-form>\r\n  </el-tab-pane>\r\n</el-tabs>\r\n  </div>\r\n\r\n  <div class=\"button-container\">\r\n      <button @click=\"build\">Build</button>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n\r\nimport { useRoute } from 'vue-router';\r\nimport { ref, reactive, onMounted, watch } from 'vue';\r\nimport configData from '@/assets/config.json';\r\nimport { computed } from 'vue';\r\nimport { useStore } from 'vuex';\r\n\r\n\r\nexport default {\r\n  setup() {\r\n    const store = useStore();\r\n    // 使用 computed 来创建只读的计算属性，它们将从 Vuex store 中获取状态\r\n    const selection1 = computed(() => store.state.selections.selection1);\r\n    const selection2 = computed(() => store.state.selections.selection2);\r\n    const selection3 = computed(() => store.state.selections.selection3);\r\n    const selection4 = computed(() => store.state.selections.selection4); \r\n    const activeName = ref('first');\r\n    const combinedTabsConfig = ref(configData); // 这里应该是你的标签页配置数组\r\n    const forms = reactive({});\r\n\r\n    // 初始化forms对象，为每个tab和formItem创建响应式属性\r\n    const initializeForms = (config) => {\r\n      const formsData = {};\r\n      config.forEach((tab) => {\r\n        formsData[tab.label] = {};\r\n        tab.formItems.forEach((item) => {\r\n          formsData[tab.label][item.model] = '';\r\n        });\r\n      });\r\n      return formsData;\r\n    };\r\n\r\n    // 使用初始化函数设置forms的初始值\r\n    Object.keys(initializeForms(configData)).forEach(key => {\r\n      forms[key] = initializeForms(configData)[key];\r\n    });\r\n\r\n    // 更新表单的方法\r\n    const updateForms = () => {\r\n      // 根据value1中的选择更新forms对象\r\n      value1.value.forEach((selectedTabLabel) => {\r\n        const tabConfig = configData.find(tab => tab.label === selectedTabLabel);\r\n        if (tabConfig) {\r\n          tabConfig.formItems.forEach((item) => {\r\n            if (forms[selectedTabLabel]) {\r\n              forms[selectedTabLabel][item.model] = item.label || '';\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(value1, updateForms, { immediate: true });\r\n\r\n      // 在组件挂载后获取路由查询参数并赋值\r\n    onMounted(() => {\r\n      selection1.value = route.query.selection1 || '';\r\n      selection2.value = route.query.selection2 || '';\r\n      selection3.value = route.query.selection3 || '';\r\n      try {\r\n        value1.value = JSON.parse(route.query.selection4 || '[]');\r\n      } catch (e) {\r\n        value1.value = [];\r\n      }\r\n    });\r\n\r\n    // 定义build方法\r\n    const build = () => {\r\n      // 这里应该是你的构建逻辑\r\n      console.log('Build function called');\r\n    };\r\n\r\n\r\n    // 返回响应式引用和函数...\r\n    return {\r\n      selection1,\r\n      selection2,\r\n      selection3,\r\n      value1, // 返回value1\r\n      activeName,\r\n      combinedTabsConfig,\r\n      forms, // 返回forms对象\r\n      build, // 返回build函数\r\n    };\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n.tabs-container {\r\n  max-width: 600px; /* 最大宽度，宽度可以根据内容自动调整 */\r\n  min-height: 400px; /* 最小高度，高度可以根据内容自动调整 */\r\n  margin: 20px auto; /* 上下边距和自动左右边距 */\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n  border-radius: 4px; /* 圆角边框 */\r\n  border-color: #000000;\r\n  background-color: #00000010; /* 设置背景颜色为浅灰色 */\r\n  padding: 20px; /* 内边距 */\r\n  font-size: 1em; /* 字体大小 */\r\n  font-family: sans-serif; /* 字体家族 */\r\n  color: #000000; /* 字体颜色设置为黑色 */\r\n  font-weight: bold; /* 字体加粗 */\r\n  \r\n}\r\n\r\n/* 选中的选项卡样式 */\r\n.tabs-container .el-tabs__item.is-active {\r\n  background-color: #409EFF; /* 蓝色背景 */\r\n  color: white; /* 白色文字 */\r\n  font-family: sans-serif; /* 字体家族 */\r\n  color: #000000; /* 字体颜色设置为黑色 */\r\n  font-weight: bold; /* 字体加粗 */\r\n}\r\n\r\n/* 未选中的选项卡样式 */\r\n.tabs-container .el-tabs__item {\r\n  background-color: white; /* 白色背景 */\r\n  color: #606266; /* 文字颜色 */\r\n  border-color: #dcdfe6; /* 边框颜色 */\r\n  font-family: sans-serif; /* 字体家族 */\r\n  color: #000000; /* 字体颜色设置为黑色 */\r\n  font-weight: bold; /* 字体加粗 */\r\n}\r\n\r\n.el-form-item {\r\n  margin-bottom: 20px; /* 增加表单项之间的间距 */\r\n  \r\n}\r\n\r\n.el-input {\r\n  width: 100%; /* 输入框宽度设置为100% */\r\n  \r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  justify-content: flex-end; /* 将按钮对齐到右边 */\r\n  margin-right: 85px; /* 右边距20px */\r\n}\r\n\r\n.button-container button {\r\n  margin-top: 1%;\r\n  padding: 10px 35px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.button-container button:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n\r\n\r\n<style scoped>\r\n\r\n.search-form {\r\n  max-width: 90%;\r\n  margin: 10px auto;\r\n  padding: 10px;\r\n  border: 3px solid #f7f6f6;\r\n  border-radius: 10px;\r\n  background: #ffffff;\r\n  \r\n}\r\n\r\n.row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 20px;\r\n  width: calc(50% - 20px); /* 减去间距的一半 */\r\n  \r\n}\r\n\r\n.input-group label {\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n\r\n}\r\n\r\n.input-group input{\r\n  padding: 0px;\r\n  border: 2px solid #e6e6e6;\r\n  border-radius: 4px;\r\n  width: 100%; /* 选择框宽度调整为100% */\r\n  font: 1em sans-serif;\r\n  height: 33px;\r\n  background: #c9c8c8;\r\n  \r\n}\r\n\r\n.button-row {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px; /* 增加按钮与上方元素的间距 */\r\n}\r\n\r\n.row button {\r\n  margin-top:1% ;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.row button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n\r\n\r\n</style>\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}