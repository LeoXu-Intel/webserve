{"ast":null,"code":"import { useRoute } from 'vue-router';\nimport { ref, reactive, onMounted, watch } from 'vue';\nimport configData from '@/assets/config.json';\nexport default {\n  setup() {\n    const route = useRoute();\n    const selection1 = ref('');\n    const selection2 = ref('');\n    const selection3 = ref('');\n    const value1 = ref([]); // 使用value1而不是selection4\n    const activeName = ref('first');\n    const combinedTabsConfig = ref(configData); // 这里应该是你的标签页配置数组\n    const forms = reactive({});\n\n    // 初始化forms对象，为每个tab和formItem创建响应式属性\n    const initializeForms = config => {\n      const formsData = {};\n      config.forEach(tab => {\n        formsData[tab.label] = {};\n        tab.formItems.forEach(item => {\n          formsData[tab.label][item.model] = '';\n        });\n      });\n      return formsData;\n    };\n\n    // 使用初始化函数设置forms的初始值\n    Object.keys(initializeForms(configData)).forEach(key => {\n      forms[key] = initializeForms(configData)[key];\n    });\n\n    // 更新表单的方法\n    const updateForms = () => {\n      // 根据value1中的选择更新forms对象\n      value1.value.forEach(selectedTabLabel => {\n        const tabConfig = configData.find(tab => tab.label === selectedTabLabel);\n        if (tabConfig) {\n          tabConfig.formItems.forEach(item => {\n            if (forms[selectedTabLabel]) {\n              forms[selectedTabLabel][item.model] = item.label || '';\n            }\n          });\n        }\n      });\n    };\n    watch(value1, updateForms, {\n      immediate: true\n    });\n\n    // 在组件挂载后获取路由查询参数并赋值\n    onMounted(() => {\n      selection1.value = route.query.selection1 || '';\n      selection2.value = route.query.selection2 || '';\n      selection3.value = route.query.selection3 || '';\n      try {\n        value1.value = JSON.parse(route.query.selection4 || '[]');\n      } catch (e) {\n        value1.value = [];\n      }\n    });\n\n    // 定义build方法\n    const build = () => {\n      // 这里应该是你的构建逻辑\n      console.log('Build function called');\n    };\n\n    // 返回响应式引用和函数...\n    return {\n      selection1,\n      selection2,\n      selection3,\n      value1,\n      // 返回value1\n      activeName,\n      combinedTabsConfig,\n      forms,\n      // 返回forms对象\n      build // 返回build函数\n    };\n  }\n};","map":{"version":3,"names":["useRoute","ref","reactive","onMounted","watch","configData","setup","route","selection1","selection2","selection3","value1","activeName","combinedTabsConfig","forms","initializeForms","config","formsData","forEach","tab","label","formItems","item","model","Object","keys","key","updateForms","value","selectedTabLabel","tabConfig","find","immediate","query","JSON","parse","selection4","e","build","console","log"],"sources":["/root/webserve/AI-Web/ai-web/front/src/components/LabTools/Sensor/Env_Config.vue"],"sourcesContent":["<template>\n<div style=\"display: flex; width: 100%; justify-content: center;\">\n  <el-steps :active=\"1\" finish-status=\"success\" simple style=\"width: 70%; margin-top: 5px;\">\n    <el-step title=\"Test Case Overview\"></el-step>\n    <el-step title=\"Environment Configuration\"></el-step>\n    <el-step title=\"Aotumation Configuration\"></el-step>\n  </el-steps>\n</div>\n\n  <div class=\"search-form\">\n    <div class=\"row\">\n\n      <div class=\"input-group\">\n        <label for=\"input1\">Platform:</label>\n        <input id=\"input1\" v-model=\"selection1\" readonly>\n      </div>\n\n      <div class=\"input-group\">\n        <label for=\"input2\">Test_Cycle_Name:</label>\n        <input id=\"input2\" v-model=\"selection2\" readonly>\n      </div>\n\n      <div class=\"input-group\">\n        <label for=\"input3\">Cycle_Config:</label>\n        <input id=\"input3\" v-model=\"selection3\" readonly>\n      </div>\n\n\n      <div class=\"input-group\">\n        <label for=\"select4\">Test_Domain:</label>\n          <el-select v-model=\"value1\" multiple placeholder=\"请选择\">\n            <el-option\n              v-for=\"item in options\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\">\n            </el-option>\n          </el-select>\n      </div>\n\n    </div>\n  </div>\n\n    \n\n\n   <div class=\"tabs-container\">\n    <el-tabs v-model=\"activeName\" type=\"card\">\n  <el-tab-pane\n    v-for=\"tab in combinedTabsConfig\"\n    :key=\"tab.label\"\n    :label=\"tab.label\"\n    :name=\"tab.label\"\n  >\n    <el-form label-position=\"top\">\n      <el-form-item\n        v-for=\"item in tab.formItems\"\n        :key=\"item.model\"\n        :label=\"item.label\"\n      >\n        <el-input\n          :type=\"item.type\"\n          v-model=\"forms[tab.label][item.model]\"\n        />\n      </el-form-item>\n    </el-form>\n  </el-tab-pane>\n</el-tabs>\n  </div>\n\n  <div class=\"button-container\">\n      <button @click=\"build\">Build</button>\n    </div>\n</template>\n\n\n<script>\n\nimport { useRoute } from 'vue-router';\nimport { ref, reactive, onMounted, watch } from 'vue';\nimport configData from '@/assets/config.json';\n\nexport default {\n  setup() {\n    const route = useRoute();\n    const selection1 = ref('');\n    const selection2 = ref('');\n    const selection3 = ref('');\n    const value1 = ref([]); // 使用value1而不是selection4\n    const activeName = ref('first');\n    const combinedTabsConfig = ref(configData); // 这里应该是你的标签页配置数组\n    const forms = reactive({});\n\n    // 初始化forms对象，为每个tab和formItem创建响应式属性\n    const initializeForms = (config) => {\n      const formsData = {};\n      config.forEach((tab) => {\n        formsData[tab.label] = {};\n        tab.formItems.forEach((item) => {\n          formsData[tab.label][item.model] = '';\n        });\n      });\n      return formsData;\n    };\n\n    // 使用初始化函数设置forms的初始值\n    Object.keys(initializeForms(configData)).forEach(key => {\n      forms[key] = initializeForms(configData)[key];\n    });\n\n    // 更新表单的方法\n    const updateForms = () => {\n      // 根据value1中的选择更新forms对象\n      value1.value.forEach((selectedTabLabel) => {\n        const tabConfig = configData.find(tab => tab.label === selectedTabLabel);\n        if (tabConfig) {\n          tabConfig.formItems.forEach((item) => {\n            if (forms[selectedTabLabel]) {\n              forms[selectedTabLabel][item.model] = item.label || '';\n            }\n          });\n        }\n      });\n    };\n\n    watch(value1, updateForms, { immediate: true });\n\n      // 在组件挂载后获取路由查询参数并赋值\n    onMounted(() => {\n      selection1.value = route.query.selection1 || '';\n      selection2.value = route.query.selection2 || '';\n      selection3.value = route.query.selection3 || '';\n      try {\n        value1.value = JSON.parse(route.query.selection4 || '[]');\n      } catch (e) {\n        value1.value = [];\n      }\n    });\n\n    // 定义build方法\n    const build = () => {\n      // 这里应该是你的构建逻辑\n      console.log('Build function called');\n    };\n\n\n    // 返回响应式引用和函数...\n    return {\n      selection1,\n      selection2,\n      selection3,\n      value1, // 返回value1\n      activeName,\n      combinedTabsConfig,\n      forms, // 返回forms对象\n      build, // 返回build函数\n    };\n  }\n};\n\n\n</script>\n\n\n<style>\n.tabs-container {\n  max-width: 600px; /* 最大宽度，宽度可以根据内容自动调整 */\n  min-height: 400px; /* 最小高度，高度可以根据内容自动调整 */\n  margin: 20px auto; /* 上下边距和自动左右边距 */\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\n  border-radius: 4px; /* 圆角边框 */\n  border-color: #000000;\n  background-color: #00000010; /* 设置背景颜色为浅灰色 */\n  padding: 20px; /* 内边距 */\n  font-size: 1em; /* 字体大小 */\n  font-family: sans-serif; /* 字体家族 */\n  color: #000000; /* 字体颜色设置为黑色 */\n  font-weight: bold; /* 字体加粗 */\n  \n}\n\n/* 选中的选项卡样式 */\n.tabs-container .el-tabs__item.is-active {\n  background-color: #409EFF; /* 蓝色背景 */\n  color: white; /* 白色文字 */\n  font-family: sans-serif; /* 字体家族 */\n  color: #000000; /* 字体颜色设置为黑色 */\n  font-weight: bold; /* 字体加粗 */\n}\n\n/* 未选中的选项卡样式 */\n.tabs-container .el-tabs__item {\n  background-color: white; /* 白色背景 */\n  color: #606266; /* 文字颜色 */\n  border-color: #dcdfe6; /* 边框颜色 */\n  font-family: sans-serif; /* 字体家族 */\n  color: #000000; /* 字体颜色设置为黑色 */\n  font-weight: bold; /* 字体加粗 */\n}\n\n.el-form-item {\n  margin-bottom: 20px; /* 增加表单项之间的间距 */\n  \n}\n\n.el-input {\n  width: 100%; /* 输入框宽度设置为100% */\n  \n}\n\n.button-container {\n  display: flex;\n  justify-content: flex-end; /* 将按钮对齐到右边 */\n  margin-right: 85px; /* 右边距20px */\n}\n\n.button-container button {\n  margin-top: 1%;\n  padding: 10px 35px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n  font-weight: bold;\n  transition: background-color 0.3s ease;\n}\n\n.button-container button:hover {\n  background-color: #0056b3;\n}\n</style>\n\n\n<style scoped>\n\n.search-form {\n  max-width: 90%;\n  margin: 10px auto;\n  padding: 10px;\n  border: 3px solid #f7f6f6;\n  border-radius: 10px;\n  background: #ffffff;\n  \n}\n\n.row {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n}\n\n.input-group {\n  display: flex;\n  flex-direction: column;\n  margin: 0 20px;\n  width: calc(50% - 20px); /* 减去间距的一半 */\n  \n}\n\n.input-group label {\n  margin-bottom: 10px;\n  font-weight: bold;\n\n}\n\n.input-group input{\n  padding: 0px;\n  border: 2px solid #e6e6e6;\n  border-radius: 4px;\n  width: 100%; /* 选择框宽度调整为100% */\n  font: 1em sans-serif;\n  height: 33px;\n  background: #c9c8c8;\n  \n}\n\n.button-row {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px; /* 增加按钮与上方元素的间距 */\n}\n\n.row button {\n  margin-top:1% ;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n  font-weight: bold;\n  transition: background-color 0.3s ease;\n}\n\n.row button:hover {\n  background-color: #0056b3;\n}\n\n\n\n</style>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}