{"ast":null,"code":"// store/index.js\nimport { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    // 定义state\n    selections: {\n      selection1: '',\n      selection2: '',\n      selection3: '',\n      selection4: []\n    }\n    // ...其他state\n  },\n  mutations: {\n    // 更新选择框的值\n    updateSelections(state, {\n      selection1,\n      selection2,\n      selection3,\n      selection4\n    }) {\n      state.selections.selection1 = selection1;\n      state.selections.selection2 = selection2;\n      state.selections.selection3 = selection3;\n      state.selections.selection4 = selection4;\n    }\n    // ...其他mutations\n  },\n  actions: {\n    // 加载选择框的值\n    loadSelections({\n      commit\n    }) {\n      // 这里应该是异步获取数据的逻辑，例如从API获取\n      // 假设获取到的数据如下：\n      const data = {\n        selection1: 'option1',\n        selection2: 'option2',\n        selection3: 'option1',\n        selection4: ['QAT', 'DLB']\n      };\n      commit('updateSelections', data);\n    }\n    // ...其他actions\n  },\n  getters: {\n    // 可以定义getters来获取state\n    // 例如，一个getter来获取selection1的值\n    getSelection1(state) {\n      return state.selections.selection1;\n    }\n    // ...其他getters\n  }\n});","map":{"version":3,"names":["createStore","state","selections","selection1","selection2","selection3","selection4","mutations","updateSelections","actions","loadSelections","commit","data","getters","getSelection1"],"sources":["C:/Users/axu/OneDrive - Intel Corporation/Desktop/Web serve/webserve-0320/webserve/front/src/store/index.js"],"sourcesContent":["// store/index.js\r\nimport { createStore } from 'vuex';\r\n\r\nexport default createStore({\r\n  state: {\r\n    // 定义state\r\n    selections: {\r\n      selection1: '',\r\n      selection2: '',\r\n      selection3: '',\r\n      selection4: [],\r\n    },\r\n    // ...其他state\r\n  },\r\n  mutations: {\r\n    // 更新选择框的值\r\n    updateSelections(state, { selection1, selection2, selection3, selection4 }) {\r\n      state.selections.selection1 = selection1;\r\n      state.selections.selection2 = selection2;\r\n      state.selections.selection3 = selection3;\r\n      state.selections.selection4 = selection4;\r\n    },\r\n    // ...其他mutations\r\n  },\r\n  actions: {\r\n    // 加载选择框的值\r\n    loadSelections({ commit }) {\r\n      // 这里应该是异步获取数据的逻辑，例如从API获取\r\n      // 假设获取到的数据如下：\r\n      const data = {\r\n        selection1: 'option1',\r\n        selection2: 'option2',\r\n        selection3: 'option1',\r\n        selection4: ['QAT', 'DLB'],\r\n      };\r\n      commit('updateSelections', data);\r\n    },\r\n    // ...其他actions\r\n  },\r\n  getters: {\r\n    // 可以定义getters来获取state\r\n    // 例如，一个getter来获取selection1的值\r\n    getSelection1(state) {\r\n      return state.selections.selection1;\r\n    },\r\n    // ...其他getters\r\n  }\r\n});\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACL;IACAC,UAAU,EAAE;MACVC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE;IACd;IACA;EACF,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,gBAAgBA,CAACP,KAAK,EAAE;MAAEE,UAAU;MAAEC,UAAU;MAAEC,UAAU;MAAEC;IAAW,CAAC,EAAE;MAC1EL,KAAK,CAACC,UAAU,CAACC,UAAU,GAAGA,UAAU;MACxCF,KAAK,CAACC,UAAU,CAACE,UAAU,GAAGA,UAAU;MACxCH,KAAK,CAACC,UAAU,CAACG,UAAU,GAAGA,UAAU;MACxCJ,KAAK,CAACC,UAAU,CAACI,UAAU,GAAGA,UAAU;IAC1C;IACA;EACF,CAAC;EACDG,OAAO,EAAE;IACP;IACAC,cAAcA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACzB;MACA;MACA,MAAMC,IAAI,GAAG;QACXT,UAAU,EAAE,SAAS;QACrBC,UAAU,EAAE,SAAS;QACrBC,UAAU,EAAE,SAAS;QACrBC,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK;MAC3B,CAAC;MACDK,MAAM,CAAC,kBAAkB,EAAEC,IAAI,CAAC;IAClC;IACA;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACAC,aAAaA,CAACb,KAAK,EAAE;MACnB,OAAOA,KAAK,CAACC,UAAU,CAACC,UAAU;IACpC;IACA;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}