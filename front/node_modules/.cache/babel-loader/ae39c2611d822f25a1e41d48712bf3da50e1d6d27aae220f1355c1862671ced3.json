{"ast":null,"code":"import { defineComponent } from 'vue';\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus'; // 确保你已经正确导入了 ElMessage\n\nexport default defineComponent({\n  methods: {\n    triggerJenkins() {\n      axios.get(\"/test\", {\n        params: {\n          // 你的参数（如果有的话）\n        }\n      }).then(response => {\n        this.result = response.data.result;\n        if (this.result && this.result.result === 'SUCCESS') {\n          // 如果构建成功，显示成功消息\n          ElMessage({\n            message: 'Jenkins build run successfully!',\n            type: 'success'\n          });\n        } else {\n          // 如果构建不成功，显示错误消息\n          ElMessage({\n            message: 'Jenkins build did not run successfully.',\n            type: 'error'\n          });\n        }\n      }).catch(error => {\n        // 如果请求失败，显示错误消息\n        ElMessage({\n          message: `Error: ${error.message}`,\n          type: 'error'\n        });\n      });\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","axios","ElMessage","methods","triggerJenkins","get","params","then","response","result","data","message","type","catch","error"],"sources":["/root/webserve/AI-Web/ai-web/front/src/components/LabTools/Sensor/JenkinsAPI-N.vue"],"sourcesContent":["<template>\n  <el-row style=\"margin-top: 20px;\">\n    <el-col :span=\"12\" :offset=\"1\">\n      <el-card class=\"box-card\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>Jenkins API Trigger</span>\n        </div>\n        <el-row type=\"flex\" justify=\"center\" style=\"margin-top: 30px;\">\n          <el-button type=\"primary\" @click=\"triggerJenkins\">Trigger Jenkins Build</el-button>\n        </el-row>\n      </el-card>\n    </el-col>\n  </el-row>\n</template>\n\n\n\n<script>\nimport { defineComponent } from 'vue';\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus'; // 确保你已经正确导入了 ElMessage\n\nexport default defineComponent({\n  methods: {\n    triggerJenkins() {\n      axios.get(\"/test\", {\n        params: {\n          // 你的参数（如果有的话）\n        }\n      }).then((response) => {\n        this.result = response.data.result;\n        if (this.result && this.result.result === 'SUCCESS') {\n          // 如果构建成功，显示成功消息\n          ElMessage({\n            message: 'Jenkins build run successfully!',\n            type: 'success',\n          });\n        } else {\n          // 如果构建不成功，显示错误消息\n          ElMessage({\n            message: 'Jenkins build did not run successfully.',\n            type: 'error',\n          });\n        }\n      }).catch((error) => {\n        // 如果请求失败，显示错误消息\n        ElMessage({\n          message: `Error: ${error.message}`,\n          type: 'error',\n        });\n      });\n    },\n  },\n});\n</script>\n\n\n\n<style scoped>\n.box-card {\n  transition: 0.3s;\n  cursor: pointer;\n  text-align: center;\n}\n.box-card:hover {\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n}\n</style>\n"],"mappings":"AAkBA,SAASA,eAAc,QAAS,KAAK;AACrC,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,cAAc,EAAE;;AAE1C,eAAeF,eAAe,CAAC;EAC7BG,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACfH,KAAK,CAACI,GAAG,CAAC,OAAO,EAAE;QACjBC,MAAM,EAAE;UACN;QAAA;MAEJ,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QACpB,IAAI,CAACC,MAAK,GAAID,QAAQ,CAACE,IAAI,CAACD,MAAM;QAClC,IAAI,IAAI,CAACA,MAAK,IAAK,IAAI,CAACA,MAAM,CAACA,MAAK,KAAM,SAAS,EAAE;UACnD;UACAP,SAAS,CAAC;YACRS,OAAO,EAAE,iCAAiC;YAC1CC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,OAAO;UACL;UACAV,SAAS,CAAC;YACRS,OAAO,EAAE,yCAAyC;YAClDC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QAClB;QACAZ,SAAS,CAAC;UACRS,OAAO,EAAG,UAASG,KAAK,CAACH,OAAQ,EAAC;UAClCC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}